# 定义工作流的名称
name: CI
# 当向 main 分支推送代码或创建 Pull Request 时，这个工作流会被触发。
on:
  # 当代码推送到指定分支时触发
  push:
    # 指定工作流仅在特定分支上运行
    branches:
      - ci
  pull_request:
    branches:
      - ci

# 定义一组任务（job）。每个任务可以包含多个步骤（steps）
jobs:
  # 任务的唯一标识符,自定义的任意名称，用于在 YAML 文件中引用或串联其他任务
  # 将任务分解为逻辑块，例如安装依赖、运行测试、构建项目等
  install:
    # 指定任务运行的虚拟机环境
    # ubuntu-latest：使用最新版本的 Ubuntu
    # windows-latest：使用最新版本的 Windows
    # macos-latest：使用最新版本的 macOS
    runs-on: ubuntu-latest
    # 定义任务中的具体步骤。每个步骤可以执行特定的操作
    steps:
      # 步骤的名称，便于在 GitHub Actions 的 UI 中查看和调试
      - name: Checkout code
        # 使用社区或官方提供的 GitHub Action。通过 uses 可以调用一个现成的 Action 来执行复杂操作
        # 通常是 用户名/仓库名@版本号 的形式，例如 actions/checkout@v4 就是 GitHub 官方提供的一个用于检出代码的 Action
        uses: actions/checkout@v4

      - name: pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v3
        # 为 uses 或 run 提供的参数，指定需要使用的选项或输入
        with:
          # # 使用 Node.js 18 版本
          node-version: '18'
          cache: 'pnpm'

      - name: Cache Nx workspace
        # 使用缓存 Action
        uses: actions/cache@v3
        with:
          # 缓存下面的文件
          path: |
            node_modules
            .nx/.cache
            dist

          # key 和 restore-keys 是用来管理缓存的，这些缓存可以加速构建流程
          # key 是缓存的唯一标识符。每次工作流运行时，GitHub Actions 会根据这个 key 查找之前的缓存
          # 如果找到了，就直接使用缓存中的内容，而不用重新执行相关任务（如依赖安装）
          key: ${{ runner.os }}-nx-${{ hashFiles('pnpm-lock.yaml') }}-${{ github.sha }}
          # 如果缓存不存在则恢复
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Install dependencies
        # 直接在虚拟机上运行一段命令，比如 pnpm install 用于安装依赖
        run: pnpm install

  build:
    runs-on: ubuntu-latest
    # 指定当前任务依赖于另一个任务。只有依赖的任务成功完成后，当前任务才会执行
    # 串联多个任务，确保任务按顺序执行
    needs: install
    # 定义任务的并行策略
    strategy:
      # 可以让同一个任务使用不同的参数并行运行
      matrix:
        # target 依次会取 lint、test 和 build，从而并行运行这三项任务
        target: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set SHAs
        uses: nrwl/nx-set-shas@v4

      - name: Run Nx affected commands
        run: pnpm exec nx affected --target=${{ matrix.target }} --parallel

  deploy:
    runs-on: ubuntu-latest
    needs: build
    # 只有条件为 true 时才会执行当前步骤或任务
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: ./scripts/deploy.sh

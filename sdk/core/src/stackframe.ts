/**
 * 接口为异常发生时的代码堆栈信息提供了详细的描述。
 * 通过这些信息，开发者可以准确定位到出错的位置、查看相关代码片段和局部变量的状态，
 * 从而更好地理解和调试代码中的问题。
 * 这些信息在错误追踪和调试过程中极为重要，有助于迅速找出问题的根源并采取相应的修复措施。
 */
export interface StackFrame {
  /**
   * 当前堆栈帧中发生错误的文件名
   * 这是相对路径或绝对路径中的文件名，通常用于定位错误发生的具体文件
   */
  filename?: string;
  /**
   * 发生错误的函数名称
   * 如果堆栈帧中包含了函数名，这个字段将标识出错误是在哪个函数中发生的
   */
  function?: string;
  /**
   * 发生错误的模块名称
   * 在模块化的代码中（如使用 ES Modules 或 CommonJS），这个字段可以指示出错误是在哪个模块中发生的
   */
  module?: string;
  /**
   * 当前堆栈帧所属的平台类型
   * 这可能是 javascript、node、java、python 等，帮助区分错误是在什么运行环境中发生的。
   */
  platform?: string;
  /**
   * 发生错误的代码所在行号
   * 这个字段帮助开发者快速定位到代码中的具体行，了解问题的所在
   */
  lineno?: number;
  /**
   * 发生错误的代码所在列号
   * 这个字段补充了行号，帮助更精确地定位到代码中出错的具体位置
   */
  colno?: number;
  /**
   * 错误发生时文件的绝对路径
   * 这通常比 filename 更加详细，显示了文件在文件系统中的完整路径
   */
  abs_path?: string;
  /**
   * 错误发生时的代码行内容
   * 这个字段显示了错误所在行的代码内容，有助于理解错误发生时的上下文
   */
  context_line?: string;
  /**
   * 错误发生行之前的几行代码内容
   * 这是一个字符串数组，用来显示在错误发生行之前的几行代码，帮助提供更完整的代码上下文
   */
  pre_context?: string[];
  /**
   * 错误发生行之后的几行代码内容
   * 类似于 pre_context，这个字段显示错误发生行之后的几行代码，提供错误发生后的上下文
   */
  post_context?: string[];
  /**
   * 标识这个堆栈帧是否属于应用程序代码
   * 通常情况下，开发者希望关注的是自己编写的代码中的错误，而不是第三方库或框架的代码。这个字段可以帮助区分这两者
   */
  in_app?: boolean;
  /**
   * 当前指令的地址
   * 这个字段通常在原生代码中使用，用于标识正在执行的机器指令的地址
   */
  instruction_addr?: string;
  /**
   * 地址模式，用于解释 instruction_addr 的格式或含义
   * 这个字段通常和原生平台相关，用于指定指令地址的模式或类型
   */
  addr_mode?: string;
  /**
   * 错误发生时的局部变量状态
   * 这是一个键值对，记录了在错误发生时函数内部的局部变量及其对应的值，帮助分析函数的状态。
   */
  vars?: { [key: string]: any };
  /**
   * 与当前堆栈帧关联的调试标识符
   * 这个字段可能用于调试信息或映射符号表，帮助在调试过程中定位代码
   */
  debug_id?: string;
  /**
   * 关联模块的元数据
   * 这是一个任意类型的字段，用于存储与模块相关的额外信息或元数据
   */
  module_metadata?: any;
}
